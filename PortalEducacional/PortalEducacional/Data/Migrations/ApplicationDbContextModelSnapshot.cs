// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using PortalEducacional.Data;
using PortalEducacional.Models;
using System;

namespace PortalEducacional.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("PortalEducacional.Models.Aluno", b =>
                {
                    b.Property<int>("AlunoID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("DataCadastro");

                    b.Property<DateTime>("DataNascimento");

                    b.Property<int>("EscolaID");

                    b.Property<byte[]>("Foto");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Ra")
                        .IsRequired()
                        .HasMaxLength(20);

                    b.Property<int?>("ResposavelFinanceiroID");

                    b.Property<int?>("ResposavelLegalID");

                    b.Property<decimal?>("SaldoDisponivel");

                    b.Property<int>("SerieID");

                    b.Property<int>("TipoGenero");

                    b.HasKey("AlunoID");

                    b.HasIndex("EscolaID");

                    b.HasIndex("SerieID");

                    b.ToTable("Aluno");
                });

            modelBuilder.Entity("PortalEducacional.Models.AlunoProdutos", b =>
                {
                    b.Property<int>("AlunoProdutosID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlunoID");

                    b.Property<int>("ProdutoID");

                    b.HasKey("AlunoProdutosID");

                    b.HasIndex("AlunoID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("AlunoProdutos");
                });

            modelBuilder.Entity("PortalEducacional.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<bool>("Ativo");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<int>("EscolaID");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<bool>("Master");

                    b.Property<string>("Nome")
                        .IsRequired();

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<int?>("PerfilID");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("EscolaID");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PerfilID");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("PortalEducacional.Models.Biometria", b =>
                {
                    b.Property<Guid>("BiometriaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlunoID");

                    b.Property<int>("Dedo");

                    b.Property<int>("EscolaID");

                    b.Property<int>("FuncionarioID");

                    b.Property<string>("HashDedo");

                    b.Property<int?>("ResponsavelID");

                    b.HasKey("BiometriaID");

                    b.ToTable("Biometria");
                });

            modelBuilder.Entity("PortalEducacional.Models.CaixaFechamento", b =>
                {
                    b.Property<int>("CaixaFechamentoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersID");

                    b.Property<string>("DataCadastro");

                    b.Property<int>("EscolaID");

                    b.Property<bool>("Fechado");

                    b.Property<double>("SaldoFinal");

                    b.Property<double>("SaldoInicial");

                    b.HasKey("CaixaFechamentoID");

                    b.HasIndex("EscolaID");

                    b.ToTable("CaixaFechamento");
                });

            modelBuilder.Entity("PortalEducacional.Models.CaixaMovimento", b =>
                {
                    b.Property<int>("CaixaMovimentoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersID");

                    b.Property<int>("CaixaFechamentoID");

                    b.Property<string>("DataCadastro");

                    b.Property<int?>("PedidoID");

                    b.Property<int?>("SangriaCaixaID");

                    b.Property<double>("Valor");

                    b.HasKey("CaixaMovimentoID");

                    b.HasIndex("CaixaFechamentoID");

                    b.HasIndex("PedidoID");

                    b.HasIndex("SangriaCaixaID");

                    b.ToTable("CaixaMovimento");
                });

            modelBuilder.Entity("PortalEducacional.Models.Cargo", b =>
                {
                    b.Property<int>("CargoID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("CargoID");

                    b.ToTable("Cargo");
                });

            modelBuilder.Entity("PortalEducacional.Models.Categoria", b =>
                {
                    b.Property<int>("CategoriaID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<string>("Imagem");

                    b.HasKey("CategoriaID");

                    b.ToTable("Categoria");
                });

            modelBuilder.Entity("PortalEducacional.Models.Cidade", b =>
                {
                    b.Property<int>("CidadeId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CodIbge");

                    b.Property<int>("EstadoId");

                    b.Property<string>("Nome");

                    b.HasKey("CidadeId");

                    b.HasIndex("EstadoId");

                    b.ToTable("Cidade");
                });

            modelBuilder.Entity("PortalEducacional.Models.DadoNutricional", b =>
                {
                    b.Property<int>("DadoNutricionalID")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Porcao");

                    b.Property<int>("ProdutoID");

                    b.Property<int>("TipoNutricionalID");

                    b.Property<decimal>("ValorDiario");

                    b.HasKey("DadoNutricionalID");

                    b.HasIndex("ProdutoID");

                    b.HasIndex("TipoNutricionalID");

                    b.ToTable("DadoNutricional");
                });

            modelBuilder.Entity("PortalEducacional.Models.Endereco", b =>
                {
                    b.Property<int>("EnderecoId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Bairro")
                        .IsRequired()
                        .HasMaxLength(60);

                    b.Property<string>("CEP")
                        .IsRequired()
                        .HasMaxLength(10);

                    b.Property<int>("CidadeId");

                    b.Property<string>("Complemento")
                        .HasMaxLength(100);

                    b.Property<string>("Logradouro")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Numero")
                        .IsRequired();

                    b.HasKey("EnderecoId");

                    b.HasIndex("CidadeId");

                    b.ToTable("Endereco");
                });

            modelBuilder.Entity("PortalEducacional.Models.Escola", b =>
                {
                    b.Property<int>("EscolaID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasMaxLength(19);

                    b.Property<string>("DataCadastro");

                    b.Property<string>("Email")
                        .HasMaxLength(100);

                    b.Property<int>("EnderecoId");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Telefone")
                        .IsRequired()
                        .HasMaxLength(15);

                    b.HasKey("EscolaID");

                    b.HasIndex("EnderecoId");

                    b.ToTable("Escola");
                });

            modelBuilder.Entity("PortalEducacional.Models.EscolaFornecedor", b =>
                {
                    b.Property<int>("EscolaID");

                    b.Property<int>("FornecedorID");

                    b.HasKey("EscolaID", "FornecedorID");

                    b.HasIndex("FornecedorID");

                    b.ToTable("EscolaFornecedor");
                });

            modelBuilder.Entity("PortalEducacional.Models.Estado", b =>
                {
                    b.Property<int>("EstadoId")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CodIbge");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("UF")
                        .IsRequired()
                        .HasMaxLength(2);

                    b.HasKey("EstadoId");

                    b.ToTable("Estado");
                });

            modelBuilder.Entity("PortalEducacional.Models.Estoque", b =>
                {
                    b.Property<int>("EstoqueID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersID");

                    b.Property<string>("DataCadastro");

                    b.Property<int>("EscolaID");

                    b.Property<string>("Historico")
                        .IsRequired();

                    b.Property<int>("ProdutoID");

                    b.Property<double>("Quantidade");

                    b.Property<bool>("Saida");

                    b.Property<double?>("ValorCompra");

                    b.HasKey("EstoqueID");

                    b.HasIndex("EscolaID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("Estoque");
                });

            modelBuilder.Entity("PortalEducacional.Models.EstoqueEmpresa", b =>
                {
                    b.Property<int>("EstoqueEmpresaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EscolaID");

                    b.Property<int>("ProdutoID");

                    b.Property<double?>("QuantidadeMaxima");

                    b.Property<double?>("QuantidadeMinima");

                    b.Property<double>("Saldo");

                    b.Property<string>("Validade");

                    b.HasKey("EstoqueEmpresaID");

                    b.HasIndex("EscolaID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("EstoqueEmpresa");
                });

            modelBuilder.Entity("PortalEducacional.Models.FaturamentoCartao", b =>
                {
                    b.Property<int>("FaturamentoCartaoID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserID");

                    b.Property<string>("Bandeira");

                    b.Property<string>("DataTransacao");

                    b.Property<string>("DataVencimento")
                        .IsRequired();

                    b.Property<string>("NumeroCartao")
                        .IsRequired();

                    b.Property<string>("PaymentID");

                    b.Property<string>("TitularCartao")
                        .IsRequired();

                    b.Property<decimal>("Valor");

                    b.HasKey("FaturamentoCartaoID");

                    b.HasIndex("ApplicationUserID");

                    b.ToTable("FaturamentoCartao");
                });

            modelBuilder.Entity("PortalEducacional.Models.Fornecedor", b =>
                {
                    b.Property<int>("FornecedorID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("Cnpj")
                        .HasMaxLength(18);

                    b.Property<string>("DataCadastro");

                    b.Property<string>("Descricao")
                        .HasMaxLength(200);

                    b.Property<string>("Email");

                    b.Property<int>("EnderecoID");

                    b.Property<int>("EscolaFornecedorID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<string>("Telefone");

                    b.HasKey("FornecedorID");

                    b.HasIndex("EnderecoID");

                    b.ToTable("Fornecedor");
                });

            modelBuilder.Entity("PortalEducacional.Models.Funcionario", b =>
                {
                    b.Property<int>("FuncionarioID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<int>("CargoId");

                    b.Property<string>("DataCadastro");

                    b.Property<int>("EscolaId");

                    b.Property<bool>("Master");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("FuncionarioID");

                    b.HasIndex("CargoId");

                    b.HasIndex("EscolaId");

                    b.ToTable("Funcionario");
                });

            modelBuilder.Entity("PortalEducacional.Models.Nutricional", b =>
                {
                    b.Property<int>("NutricionalID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Altura")
                        .IsRequired();

                    b.Property<int>("AlunoID");

                    b.Property<string>("DataCadastro");

                    b.Property<string>("Descricao")
                        .HasMaxLength(200);

                    b.Property<string>("Peso")
                        .IsRequired();

                    b.Property<string>("Resultado");

                    b.HasKey("NutricionalID");

                    b.HasIndex("AlunoID");

                    b.ToTable("Nutricional");
                });

            modelBuilder.Entity("PortalEducacional.Models.Pedido", b =>
                {
                    b.Property<int>("PedidoID")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("AlunoID");

                    b.Property<string>("AspNetUsersID");

                    b.Property<string>("DataCadastro");

                    b.Property<double>("Desconto");

                    b.Property<int>("EscolaID");

                    b.Property<int?>("FuncionarioID");

                    b.Property<string>("Numero")
                        .IsRequired();

                    b.Property<string>("Observacao");

                    b.Property<double>("ValorBruto");

                    b.Property<double>("ValorTotal");

                    b.HasKey("PedidoID");

                    b.HasIndex("AlunoID");

                    b.HasIndex("EscolaID");

                    b.HasIndex("FuncionarioID");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("PortalEducacional.Models.PedidoItem", b =>
                {
                    b.Property<int>("PedidoItemID")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Desconto");

                    b.Property<int>("PedidoID");

                    b.Property<int>("ProdutoID");

                    b.Property<double>("Quantidade");

                    b.Property<double>("Valor");

                    b.HasKey("PedidoItemID");

                    b.HasIndex("PedidoID");

                    b.HasIndex("ProdutoID");

                    b.ToTable("PedidoItem");
                });

            modelBuilder.Entity("PortalEducacional.Models.PedidoVendaCredito", b =>
                {
                    b.Property<int>("PedidoVendaCreditoID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AlunoID");

                    b.Property<string>("ApplicationUserID");

                    b.Property<string>("Data");

                    b.Property<int>("FaturamentoCartaoID");

                    b.Property<string>("Numero");

                    b.Property<decimal>("Valor");

                    b.HasKey("PedidoVendaCreditoID");

                    b.HasIndex("AlunoID");

                    b.HasIndex("ApplicationUserID");

                    b.HasIndex("FaturamentoCartaoID");

                    b.ToTable("PedidoVendaCredito");
                });

            modelBuilder.Entity("PortalEducacional.Models.Perfil", b =>
                {
                    b.Property<int>("PerfilID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<int>("EscolaID");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.HasKey("PerfilID");

                    b.HasIndex("EscolaID");

                    b.ToTable("Perfil");
                });

            modelBuilder.Entity("PortalEducacional.Models.PerfilPermissoes", b =>
                {
                    b.Property<int>("PerfilPermissoesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Controller");

                    b.Property<int>("PerfilID");

                    b.Property<string>("Permissao");

                    b.HasKey("PerfilPermissoesID");

                    b.HasIndex("PerfilID");

                    b.ToTable("PerfilPermissoes");
                });

            modelBuilder.Entity("PortalEducacional.Models.Produto", b =>
                {
                    b.Property<int>("ProdutoID")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Ativo");

                    b.Property<string>("AtualizadoPor");

                    b.Property<int>("CategoriaID");

                    b.Property<string>("Codigo")
                        .IsRequired();

                    b.Property<string>("CodigoBarras");

                    b.Property<string>("DataCadastro");

                    b.Property<string>("Descricao")
                        .IsRequired();

                    b.Property<int>("EscolaID");

                    b.Property<string>("Observacao");

                    b.Property<bool>("PrecisaAprovacao");

                    b.Property<DateTime>("UltimaAtualizacao");

                    b.Property<string>("UnidadeMedida");

                    b.Property<decimal>("Valor");

                    b.HasKey("ProdutoID");

                    b.HasIndex("CategoriaID");

                    b.HasIndex("EscolaID");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("PortalEducacional.Models.RepositorioPDF", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aluno");

                    b.Property<string>("EmailFinanceiro");

                    b.Property<string>("EmailLegal");

                    b.Property<string>("EmailMae");

                    b.Property<string>("EmailPai");

                    b.Property<string>("Escola");

                    b.Property<byte[]>("PDF");

                    b.Property<string>("RA");

                    b.HasKey("ID");

                    b.ToTable("RepositorioPDF");
                });

            modelBuilder.Entity("PortalEducacional.Models.Responsavel", b =>
                {
                    b.Property<int>("ResponsavelID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPF")
                        .HasMaxLength(14);

                    b.Property<string>("DataCadastro");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Nome")
                        .HasMaxLength(100);

                    b.Property<string>("Telefone")
                        .HasMaxLength(15);

                    b.HasKey("ResponsavelID");

                    b.ToTable("Responsavel");
                });

            modelBuilder.Entity("PortalEducacional.Models.ResponsavelFinanceiro", b =>
                {
                    b.Property<int>("ResponsavelFinanceiroID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CPF")
                        .HasMaxLength(14);

                    b.Property<string>("DataCadastro");

                    b.Property<string>("Email")
                        .HasMaxLength(50);

                    b.Property<string>("Nome")
                        .HasMaxLength(100);

                    b.Property<int>("ResponsavelID");

                    b.Property<string>("Telefone")
                        .HasMaxLength(15);

                    b.HasKey("ResponsavelFinanceiroID");

                    b.HasIndex("ResponsavelID");

                    b.ToTable("ResponsavelFinanceiro");
                });

            modelBuilder.Entity("PortalEducacional.Models.SangriaCaixa", b =>
                {
                    b.Property<int>("SangriaCaixaID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AspNetUsersID");

                    b.Property<string>("DataCadastro");

                    b.Property<string>("Motivo")
                        .IsRequired();

                    b.Property<double>("Valor");

                    b.HasKey("SangriaCaixaID");

                    b.ToTable("SangriaCaixa");
                });

            modelBuilder.Entity("PortalEducacional.Models.Serie", b =>
                {
                    b.Property<int>("SerieID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Descricao");

                    b.HasKey("SerieID");

                    b.ToTable("Serie");
                });

            modelBuilder.Entity("PortalEducacional.Models.SetupEscola", b =>
                {
                    b.Property<int>("SetupEscolaID")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EscolaID");

                    b.Property<int?>("PonteiroPedido");

                    b.HasKey("SetupEscolaID");

                    b.HasIndex("EscolaID");

                    b.ToTable("SetupEscola");
                });

            modelBuilder.Entity("PortalEducacional.Models.TipoNutricional", b =>
                {
                    b.Property<int>("TipoNutricionalID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.Property<string>("UnidadeMedida");

                    b.HasKey("TipoNutricionalID");

                    b.ToTable("TipoNutricional");
                });

            modelBuilder.Entity("PortalEducacional.Models.UsuarioPermissoes", b =>
                {
                    b.Property<int>("UsuarioPermissoesID")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ApplicationUserID");

                    b.Property<string>("Controller");

                    b.Property<string>("Permissao");

                    b.HasKey("UsuarioPermissoesID");

                    b.HasIndex("ApplicationUserID");

                    b.ToTable("UsuarioPermissoes");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("PortalEducacional.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("PortalEducacional.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("PortalEducacional.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.Aluno", b =>
                {
                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Serie", "Serie")
                        .WithMany("Alunos")
                        .HasForeignKey("SerieID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.AlunoProdutos", b =>
                {
                    b.HasOne("PortalEducacional.Models.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.ApplicationUser", b =>
                {
                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilID");
                });

            modelBuilder.Entity("PortalEducacional.Models.CaixaFechamento", b =>
                {
                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.CaixaMovimento", b =>
                {
                    b.HasOne("PortalEducacional.Models.CaixaFechamento", "CaixaFechamento")
                        .WithMany()
                        .HasForeignKey("CaixaFechamentoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoID");

                    b.HasOne("PortalEducacional.Models.SangriaCaixa", "SangriaCaixa")
                        .WithMany()
                        .HasForeignKey("SangriaCaixaID");
                });

            modelBuilder.Entity("PortalEducacional.Models.Cidade", b =>
                {
                    b.HasOne("PortalEducacional.Models.Estado", "Estado")
                        .WithMany()
                        .HasForeignKey("EstadoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.DadoNutricional", b =>
                {
                    b.HasOne("PortalEducacional.Models.Produto", "Produto")
                        .WithMany("DadosNutricionais")
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.TipoNutricional", "TipoNutricional")
                        .WithMany()
                        .HasForeignKey("TipoNutricionalID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.Endereco", b =>
                {
                    b.HasOne("PortalEducacional.Models.Cidade", "Cidade")
                        .WithMany()
                        .HasForeignKey("CidadeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.Escola", b =>
                {
                    b.HasOne("PortalEducacional.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.EscolaFornecedor", b =>
                {
                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany("EscolaFornecedor")
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("PortalEducacional.Models.Fornecedor", "Fornecedor")
                        .WithMany("EscolaFornecedor")
                        .HasForeignKey("FornecedorID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.Estoque", b =>
                {
                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.EstoqueEmpresa", b =>
                {
                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.FaturamentoCartao", b =>
                {
                    b.HasOne("PortalEducacional.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");
                });

            modelBuilder.Entity("PortalEducacional.Models.Fornecedor", b =>
                {
                    b.HasOne("PortalEducacional.Models.Endereco", "Endereco")
                        .WithMany()
                        .HasForeignKey("EnderecoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.Funcionario", b =>
                {
                    b.HasOne("PortalEducacional.Models.Cargo", "Cargo")
                        .WithMany("Funcionarios")
                        .HasForeignKey("CargoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany("Funcionarios")
                        .HasForeignKey("EscolaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.Nutricional", b =>
                {
                    b.HasOne("PortalEducacional.Models.Aluno", "Aluno")
                        .WithMany("Nutricionais")
                        .HasForeignKey("AlunoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.Pedido", b =>
                {
                    b.HasOne("PortalEducacional.Models.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoID");

                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Funcionario", "Funcionario")
                        .WithMany()
                        .HasForeignKey("FuncionarioID");
                });

            modelBuilder.Entity("PortalEducacional.Models.PedidoItem", b =>
                {
                    b.HasOne("PortalEducacional.Models.Pedido", "Pedido")
                        .WithMany()
                        .HasForeignKey("PedidoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.PedidoVendaCredito", b =>
                {
                    b.HasOne("PortalEducacional.Models.Aluno", "Aluno")
                        .WithMany()
                        .HasForeignKey("AlunoID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");

                    b.HasOne("PortalEducacional.Models.FaturamentoCartao", "FaturamentoCartao")
                        .WithMany()
                        .HasForeignKey("FaturamentoCartaoID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.Perfil", b =>
                {
                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.PerfilPermissoes", b =>
                {
                    b.HasOne("PortalEducacional.Models.Perfil", "Perfil")
                        .WithMany()
                        .HasForeignKey("PerfilID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.Produto", b =>
                {
                    b.HasOne("PortalEducacional.Models.Categoria", "Categoria")
                        .WithMany()
                        .HasForeignKey("CategoriaID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany("Produtos")
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.ResponsavelFinanceiro", b =>
                {
                    b.HasOne("PortalEducacional.Models.Responsavel", "Responsavel")
                        .WithMany("ResponsavelFinanceiro")
                        .HasForeignKey("ResponsavelID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.SetupEscola", b =>
                {
                    b.HasOne("PortalEducacional.Models.Escola", "Escola")
                        .WithMany()
                        .HasForeignKey("EscolaID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("PortalEducacional.Models.UsuarioPermissoes", b =>
                {
                    b.HasOne("PortalEducacional.Models.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserID");
                });
#pragma warning restore 612, 618
        }
    }
}
